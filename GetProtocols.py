def get_urls():
    """
    get all the urls of the text files from the oknesset website.
    """
    url = 'https://production.oknesset.org/pipelines/data/committees/meeting_protocols_text/files/'
    folder_urls = [url]
    urls = []

    while(len(folder_urls) > 0):
        curr_url = folder_urls.pop(0)
        response = requests.get(curr_url, allow_redirects=False)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            all_links = soup.find_all('a')
            file_names = [link.text for link in all_links if link.text]
            file_names = [file_name for file_name in file_names if file_name != '..']
            for file_name in file_names:
                if file_name.endswith('/') and file_name != '../':
                    folder_urls.append(curr_url + file_name)
                elif file_name.endswith('.txt'):
                    urls.append(curr_url + file_name)
        else:
            print(f"Failed to retrieve content from {url}. Status code: {response.status_code}")
    return urls

def filter_by_call_to_order(text):
    """
    check if the text contains a call to order.
    """
    offensive_words =[
        "אהצבועה", "אובססיבית", "איכס", "אינעל","שמוק","דביל","בולבול","קפוץ לי", "אנטיפתי", "אסתור", "ב\"ביצים", "בביצים", "בגועליציה", "בגזענותו",
        "בוזין", "בזוי", "בזויים", "בחרא", "ביריונים", "בנזונה", "בקקה", "בשמוק", "בתחת", "בתחתונים", "גונב", "גונבי",
        "גנב", "גנבים", "גנבת", "דימגוג", "דפוק", "דפוקים", "דרקים", "הארכיטיפ", "הבוגדים", "הזבל", "הזבלל", "הזדוניים",
        "הזוי", "הזויה", "הזויים", "החאפרים", "החארות", "החולנית", "החולרה", "החוצפן", "החמור", "יחמור", "החפרן",
        "היללן", "המבהיל", "המבחילה", "המושרצים", "המזורגג", "המחורבן", "המחורבנות", "המחורבנים", "המחורבנת", "המטומטם",
        "המטומטמת", "המנוולת", "המניאקים", "המנייאק", "המסריח", "המסריחים", "המפלצת", "המתוסבכתנכדתו", "הסטן",
        "הסרחוני", "הפאקינג", "הפושע", "הפושעים", "הפראייר", "הציבוז'י", "הקקה", "הרשע", "הרשעים", "הרשעית", "השמוק",
        "השמוקים", "השקרן", "השקרנית", "השרלטנות", "התחת", "וגנב", "ודרעק", "והנבער", "והנצלנית", "והשפל", "וחלאות",
        "וחרא", "וכוסאמק", "ולברבר", "ולעלובי", "ומנוול", "ומנוולים", "ומסריח", "וסורר", "וסטנים", "וסמרטוטית",
        "וערמומית", "ופחדן", "ופטפטני", "ופסיכופטים", "וצבוע", "וצבועה", "וציפורע", "וקשקשן","קשקשן" "ורמאי", "ורמאים",
        "ושקרן", "ושקרנים", "ושקרנית", "זבל", "זבלה", "זבלים", "זומבים", "חאלס", "חאפר", "חאפרים", "חאפרית",
        "חובבן", "חולני", "חזיר", "חירבנה", "חמוריםםם", "חרא", "חראא", "חראאא", "טינופת", "טמטום", "יאוכלי", "יבן",
        "יוק", "יזבל", "יזבלה", "יזבל", "יחתיכת", "יטמבל", "יליצן", "ימגעיל", "ימיץ", "ימניאק", "ימניייק", "ימנייק",
        "ימניק", "ימעפן", "ינעל", "כאןצבועה", "ככלבלב", "יכלב", "כנפיחה", "כפודל", "כשחלאה", "לאזעזל", "להזויים",
        "להשתין", "לזרגג", "לחאפר", "לחרא", "לחרבן", "לךגזען", "למותי", "לעזאזאל", "לעזזאל", "לקק", "לשקרנים",
        "מאוסה", "מאפן", "מבהיל", "מבהילה", "מבהילים", "מבחילה", "מגעיל", "מגעילה", "מגעילים", "מהאדיוט", "מזוויעה",
        "מזוויעים", "מזורגג", "מזנים", "מחורבן", "מחורבנות", "מחורבנת", "מטונף", "מלהתקרצץ", "מלשין", "מלשינה",
        "ממזרים", "מנובל", "מנובלים", "מניאק", "מנייאק", "מנייק", "מניפולטורית", "מניפולטיבית", "מניק", "מנניאיק",
        "מסקן", "מסקנים", "מסריח", "מסריחה", "מסריחות", "מסריחים", "מעפן", "מעפנהה", "מפגר", "מפגרים", "מפגרת",
        "מפחידה", "משקר", "משקרים", "משתין", "משתינה", "משתינות", "משתינים", "נבזי", "נבזים", "נוכל", "נוכלות",
        "נוכלים", "נוכלת", "נחש", "ניבזה", "נצלנים", "סאדיסטי", "סטן", "סטנים", "סטרפלצט", "סמרטוט", "עוכר",
        "עוכרי", "עוכרת", "פָּתט", "פאקינג", "פברק", "פברקו", "פושע", "פושעת", "יפח", "פחדנים", "פחזבל", "פיפי",
        "פלוץ", "פתטי", "פתי", "צבוע", "צבועה", "צבועים", "קברן", "קברניות", "קברנים", "קברנית", "קיבינמט",
        "קקאיות", "קקה", "קקות", "קקי", "קרימינל", "קרימינלית", "רבאק", "רמאי", "רמאים", "רמאית", "רשלן",
        "שאובססיבית", "שהמפלצת", "שודד", "שונא", "שונאת", "שטחית", "שלוזרים", "שמוק", "שמלאני", "שמלאנים",
        "שמלנים", "שפיצרקה", "שקלוזה", "שקרן", "שקרני", "שקרניות", "שקרנים", "שקרנית", "שרלטן", "שרלטנים",
        "שרלטנית", "שתחנק", "שתמות", "שתמותי", "שתסתמי", "שתשרפי", "תחמן", "תחמניות", "תחמנים", "תחמנית",
        "תיסתום", "תישארמה", "תמותי", "תנענע", "תסתום", "תסתמו", "תסתמי", "תעופי", "תעפו", "תשרף", "תשתכשכי"
        , "- - -",  "- -" , 'אני קורא אותך לסדר', 'אני קוראת אותך לסדר', 'זאת אזהרה אחרונה',
       "קריאה לסדר", "קריאת ראשונה לסדר", "אני מזהיר אותך", "קורא אותך", "קוראת אותך", "קורא לך לסדר", 
    "קוראת לך לסדר"
]
    for word in offensive_words:
        if word in text:
            return True
    return False

def get_text(url, dir='text'):
    """
    get the text from the url and save it in a file in the dir. Only if the text contains a call to order.
    """
    response = requests.get(url)
    if response.status_code == 200:
        response.encoding = 'utf-8-sig'
        if not os.path.exists(dir):
            os.makedirs(dir)
        text = response.text
        text = text.replace('”', '"').replace('“', '"').replace('״', '"')
        if filter_by_call_to_order(text):
            text = re.split('\n', text)
            with open(f'{dir}/{url.split("/")[-1]}', 'x', encoding='utf-8-sig') as file:
                file.write('\n'.join(text))
        else:
            print(f"Not found offensive words in {url}.")

    else:
        print(f"Failed to retrieve content from {url}. Status code: {response.status_code}")
        return None  
